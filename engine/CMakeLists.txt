add_library(${ENGINE_NAME} SHARED)
set_target_properties(${ENGINE_NAME}
    PROPERTIES
    FOLDER ${ENGINE_FOLDER_NAME}
    WINDOWS_EXPORT_ALL_SYMBOLS ON
    AUTOMOC ON
    AUTORCC ON
    AUTOUIC ON
)

target_compile_definitions(${ENGINE_NAME} PRIVATE ENGINE_API=${ENGINE_DLL_EXPORT} GAME_API=${ENGINE_DLL_IMPORT})
target_compile_options(${ENGINE_NAME} PRIVATE ${ENGINE_CXX_FLAGS})

find_package(Qt5 COMPONENTS Widgets REQUIRED)
find_package(OpenGL REQUIRED)
add_subdirectory(dependencies)
add_subdirectory(source)
add_subdirectory(editor)
add_subdirectory(shaders)

target_link_libraries(${ENGINE_NAME}
    ${OPENGL_LIBRARIES}
    Qt5::Widgets
    glad    
    glfw
    zlibstatic
)

get_target_property(ENGINE_INCLUDE_DIRECTORIES ${ENGINE_NAME} INCLUDE_DIRECTORIES)

add_subdirectory(tools)
target_compile_definitions(Codegen PRIVATE ENGINE_API=${ENGINE_DLL_IMPORT})
set_target_properties(${ENGINE_NAME}
    PROPERTIES
    RUNTIME_OUTPUT_NAME_DEBUG "${ENGINE_NAME}d"
    LIBRARY_OUTPUT_NAME_DEBUG "${ENGINE_NAME}d"
    ARCHIVE_OUTPUT_NAME_DEBUG "${ENGINE_NAME}d"
)


set_target_properties(${ENGINE_NAME} Codegen
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    ARCHIVE_OUTPUT_DIRECTORY "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    LIBRARY_OUTPUT_DIRECTORY "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    LIBRARY_OUTPUT_DIRECTORY_DEBUG "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    LIBRARY_OUTPUT_DIRECTORY_RELEASE "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
)

source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${SOURCE_FILES_ROOT} ${HEADER_FILES_ROOT} ${UI_FILES_ROOT})

if(MSVC)
    # add_custom_command(
    #     TARGET ${PROJECT_NAME}
    #     POST_BUILD
    #     COMMAND "xcopy" ARGS "\"${CMAKE_SOURCE_DIR}/assets_main\" \"${CMAKE_BINARY_DIR}/bin/assets\" /S /I /Q /Y"
    # )

    # add_custom_command(
    #     TARGET ${PROJECT_NAME}
    #     POST_BUILD
    #     COMMAND "xcopy" ARGS "\"${CMAKE_SOURCE_DIR}/data\" \"${CMAKE_BINARY_DIR}/bin\" /S /I /Q /Y"
    # )

    # add_custom_command(
    #     TARGET ${PROJECT_NAME}
    #     POST_BUILD
    #     COMMAND "xcopy" ARGS "\"${CMAKE_SOURCE_DIR}/engine/shaders\" \"${CMAKE_BINARY_DIR}/bin/shaders\" /S /I /Q /Y"
    # )
elseif(FALSE)
    # add linux
endif()


set(ENGINE_LOADER_SOURCE_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/source/main.cpp"
)

add_executable(${ENGINE_LOADER_NAME} ${ENGINE_LOADER_SOURCE_FILES})
target_compile_definitions(${ENGINE_LOADER_NAME} PRIVATE ENGINE_API=${ENGINE_DLL_IMPORT})
target_compile_options(${ENGINE_LOADER_NAME} PRIVATE ${ENGINE_CXX_FLAGS})
set_target_properties(${ENGINE_LOADER_NAME}
    PROPERTIES
    FOLDER ${ENGINE_FOLDER_NAME}
    RUNTIME_OUTPUT_DIRECTORY "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${ENGINE_BINARY_OUTPUT_DIRECTORY}"
    RUNTIME_OUTPUT_NAME_DEBUG "${ENGINE_LOADER_NAME}d"
)

target_link_libraries(${ENGINE_LOADER_NAME} ${ENGINE_NAME})
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${ENGINE_LOADER_SOURCE_FILES})

